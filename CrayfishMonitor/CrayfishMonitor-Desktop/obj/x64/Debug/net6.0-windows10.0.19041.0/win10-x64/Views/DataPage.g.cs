#pragma checksum "D:\GitHub\NUCST-CrayfishMonitor\CrayfishMonitor\CrayfishMonitor-Desktop\Views\DataPage.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "9F696E69C250B3F77D16FFFDC2B349E4CF26302F53C9CE245E7C469241887A9F"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CrayfishMonitor_Desktop.Views
{
    partial class DataPage : 
        global::Microsoft.UI.Xaml.Controls.Page, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Control_IsEnabled(global::Microsoft.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Microsoft.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Primitives_Selector_SelectedItem(global::Microsoft.UI.Xaml.Controls.Primitives.Selector obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(global::Microsoft.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class DataPage_obj7_Bindings :
            global::Microsoft.UI.Xaml.IDataTemplateExtension,
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IDataPage_Bindings
        {
            private global::CrayfishMonitor_Desktop.Models.MeasurementSaveData dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj7;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj8;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj8TextDisabled = false;

            public DataPage_obj7_Bindings()
            {
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 33 && columnNumber == 40)
                {
                    isobj8TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 7: // Views\DataPage.xaml line 32
                        this.obj7 = new global::System.WeakReference(global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target));
                        break;
                    case 8: // Views\DataPage.xaml line 33
                        this.obj8 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            public void DataContextChangedHandler(global::Microsoft.UI.Xaml.FrameworkElement sender, global::Microsoft.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj7.Target as global::Microsoft.UI.Xaml.Controls.Grid).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_(global::WinRT.CastExtensions.As<global::CrayfishMonitor_Desktop.Models.MeasurementSaveData>(item), 1 << phase);
            }

            public void Recycle()
            {
            }

            // IDataPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::CrayfishMonitor_Desktop.Models.MeasurementSaveData>(newDataRoot);
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::CrayfishMonitor_Desktop.Models.MeasurementSaveData obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Title(obj.Title, phase);
                    }
                }
            }
            private void Update_Title(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\DataPage.xaml line 33
                    if (!isobj8TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj8, obj, null);
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class DataPage_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IDataPage_Bindings
        {
            private global::CrayfishMonitor_Desktop.Views.DataPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.Button obj2;
            private global::Microsoft.UI.Xaml.Controls.Button obj3;
            private global::Microsoft.UI.Xaml.Controls.Button obj4;
            private global::Microsoft.UI.Xaml.Controls.ListView obj5;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj2CommandDisabled = false;
            private static bool isobj2IsEnabledDisabled = false;
            private static bool isobj3CommandDisabled = false;
            private static bool isobj3IsEnabledDisabled = false;
            private static bool isobj4IsEnabledDisabled = false;
            private static bool isobj4CommandDisabled = false;
            private static bool isobj5ItemsSourceDisabled = false;
            private static bool isobj5SelectedItemDisabled = false;

            private DataPage_obj1_BindingsTracking bindingsTracking;

            public DataPage_obj1_Bindings()
            {
                this.bindingsTracking = new DataPage_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 43 && columnNumber == 25)
                {
                    isobj2CommandDisabled = true;
                }
                else if (lineNumber == 44 && columnNumber == 25)
                {
                    isobj2IsEnabledDisabled = true;
                }
                else if (lineNumber == 46 && columnNumber == 25)
                {
                    isobj3CommandDisabled = true;
                }
                else if (lineNumber == 47 && columnNumber == 25)
                {
                    isobj3IsEnabledDisabled = true;
                }
                else if (lineNumber == 49 && columnNumber == 25)
                {
                    isobj4IsEnabledDisabled = true;
                }
                else if (lineNumber == 50 && columnNumber == 25)
                {
                    isobj4CommandDisabled = true;
                }
                else if (lineNumber == 23 && columnNumber == 21)
                {
                    isobj5ItemsSourceDisabled = true;
                }
                else if (lineNumber == 27 && columnNumber == 21)
                {
                    isobj5SelectedItemDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // Views\DataPage.xaml line 41
                        this.obj2 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        this.bindingsTracking.RegisterTwoWayListener_2(this.obj2);
                        break;
                    case 3: // Views\DataPage.xaml line 45
                        this.obj3 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        this.bindingsTracking.RegisterTwoWayListener_3(this.obj3);
                        break;
                    case 4: // Views\DataPage.xaml line 48
                        this.obj4 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        this.bindingsTracking.RegisterTwoWayListener_4(this.obj4);
                        break;
                    case 5: // Views\DataPage.xaml line 21
                        this.obj5 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                        this.bindingsTracking.RegisterTwoWayListener_5(this.obj5);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IDataPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::CrayfishMonitor_Desktop.Views.DataPage>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::CrayfishMonitor_Desktop.Views.DataPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::CrayfishMonitor_Desktop.ViewModels.DataPageViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_SaveCommand(obj.SaveCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_SaveButtonState(obj.SaveButtonState, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_ShowChartCommand(obj.ShowChartCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_ChartButtonState(obj.ChartButtonState, phase);
                        this.Update_ViewModel_RemoveButtonState(obj.RemoveButtonState, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_RemoveCommand(obj.RemoveCommand, phase);
                        this.Update_ViewModel_SaveDataItems(obj.SaveDataItems, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_SelectedDataItem(obj.SelectedDataItem, phase);
                    }
                }
            }
            private void Update_ViewModel_SaveCommand(global::Reactive.Bindings.ReactiveCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\DataPage.xaml line 41
                    if (!isobj2CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj2, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SaveButtonState(global::Reactive.Bindings.ReactivePropertySlim<global::System.Boolean> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_SaveButtonState(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_SaveButtonState_Value(obj.Value, phase);
                    }
                }
            }
            private void Update_ViewModel_SaveButtonState_Value(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DataPage.xaml line 41
                    if (!isobj2IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Control_IsEnabled(this.obj2, obj);
                    }
                }
            }
            private void Update_ViewModel_ShowChartCommand(global::Reactive.Bindings.ReactiveCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\DataPage.xaml line 45
                    if (!isobj3CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj3, obj, null);
                    }
                }
            }
            private void Update_ViewModel_ChartButtonState(global::Reactive.Bindings.ReactivePropertySlim<global::System.Boolean> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_ChartButtonState(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_ChartButtonState_Value(obj.Value, phase);
                    }
                }
            }
            private void Update_ViewModel_ChartButtonState_Value(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DataPage.xaml line 45
                    if (!isobj3IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Control_IsEnabled(this.obj3, obj);
                    }
                }
            }
            private void Update_ViewModel_RemoveButtonState(global::Reactive.Bindings.ReactivePropertySlim<global::System.Boolean> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_RemoveButtonState(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_RemoveButtonState_Value(obj.Value, phase);
                    }
                }
            }
            private void Update_ViewModel_RemoveButtonState_Value(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DataPage.xaml line 48
                    if (!isobj4IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Control_IsEnabled(this.obj4, obj);
                    }
                }
            }
            private void Update_ViewModel_RemoveCommand(global::Reactive.Bindings.ReactiveCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\DataPage.xaml line 48
                    if (!isobj4CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj4, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SaveDataItems(global::Reactive.Bindings.ReactiveCollection<global::CrayfishMonitor_Desktop.Models.MeasurementSaveData> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\DataPage.xaml line 21
                    if (!isobj5ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj5, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SelectedDataItem(global::Reactive.Bindings.ReactivePropertySlim<global::CrayfishMonitor_Desktop.Models.MeasurementSaveData> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_SelectedDataItem(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_SelectedDataItem_Value(obj.Value, phase);
                    }
                }
            }
            private void Update_ViewModel_SelectedDataItem_Value(global::CrayfishMonitor_Desktop.Models.MeasurementSaveData obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DataPage.xaml line 21
                    if (!isobj5SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj5, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_2_IsEnabled()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            if (this.dataRoot.ViewModel.SaveButtonState != null)
                            {
                                this.dataRoot.ViewModel.SaveButtonState.Value = this.obj2.IsEnabled;
                            }
                        }
                    }
                }
            }
            private void UpdateTwoWay_3_IsEnabled()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            if (this.dataRoot.ViewModel.ChartButtonState != null)
                            {
                                this.dataRoot.ViewModel.ChartButtonState.Value = this.obj3.IsEnabled;
                            }
                        }
                    }
                }
            }
            private void UpdateTwoWay_4_IsEnabled()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            if (this.dataRoot.ViewModel.RemoveButtonState != null)
                            {
                                this.dataRoot.ViewModel.RemoveButtonState.Value = this.obj4.IsEnabled;
                            }
                        }
                    }
                }
            }
            private void UpdateTwoWay_5_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            if (this.dataRoot.ViewModel.SelectedDataItem != null)
                            {
                                this.dataRoot.ViewModel.SelectedDataItem.Value = (global::CrayfishMonitor_Desktop.Models.MeasurementSaveData)this.obj5.SelectedItem;
                            }
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class DataPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<DataPage_obj1_Bindings> weakRefToBindingObj; 

                public DataPage_obj1_BindingsTracking(DataPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<DataPage_obj1_Bindings>(obj);
                }

                public DataPage_obj1_Bindings TryGetBindingObject()
                {
                    DataPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_ViewModel_SaveButtonState(null);
                    UpdateChildListeners_ViewModel_ChartButtonState(null);
                    UpdateChildListeners_ViewModel_RemoveButtonState(null);
                    UpdateChildListeners_ViewModel_SelectedDataItem(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DataPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::CrayfishMonitor_Desktop.ViewModels.DataPageViewModel obj = sender as global::CrayfishMonitor_Desktop.ViewModels.DataPageViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_SaveButtonState(obj.SaveButtonState, DATA_CHANGED);
                                bindings.Update_ViewModel_ChartButtonState(obj.ChartButtonState, DATA_CHANGED);
                                bindings.Update_ViewModel_RemoveButtonState(obj.RemoveButtonState, DATA_CHANGED);
                                bindings.Update_ViewModel_SelectedDataItem(obj.SelectedDataItem, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "SaveButtonState":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SaveButtonState(obj.SaveButtonState, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ChartButtonState":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ChartButtonState(obj.ChartButtonState, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "RemoveButtonState":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_RemoveButtonState(obj.RemoveButtonState, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedDataItem":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedDataItem(obj.SelectedDataItem, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::CrayfishMonitor_Desktop.ViewModels.DataPageViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::CrayfishMonitor_Desktop.ViewModels.DataPageViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_SaveButtonState(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DataPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Reactive.Bindings.ReactivePropertySlim<global::System.Boolean> obj = sender as global::Reactive.Bindings.ReactivePropertySlim<global::System.Boolean>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_SaveButtonState_Value(obj.Value, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Value":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SaveButtonState_Value(obj.Value, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Reactive.Bindings.ReactivePropertySlim<global::System.Boolean> cache_ViewModel_SaveButtonState = null;
                public void UpdateChildListeners_ViewModel_SaveButtonState(global::Reactive.Bindings.ReactivePropertySlim<global::System.Boolean> obj)
                {
                    if (obj != cache_ViewModel_SaveButtonState)
                    {
                        if (cache_ViewModel_SaveButtonState != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_SaveButtonState).PropertyChanged -= PropertyChanged_ViewModel_SaveButtonState;
                            cache_ViewModel_SaveButtonState = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_SaveButtonState = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_SaveButtonState;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_ChartButtonState(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DataPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Reactive.Bindings.ReactivePropertySlim<global::System.Boolean> obj = sender as global::Reactive.Bindings.ReactivePropertySlim<global::System.Boolean>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_ChartButtonState_Value(obj.Value, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Value":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ChartButtonState_Value(obj.Value, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Reactive.Bindings.ReactivePropertySlim<global::System.Boolean> cache_ViewModel_ChartButtonState = null;
                public void UpdateChildListeners_ViewModel_ChartButtonState(global::Reactive.Bindings.ReactivePropertySlim<global::System.Boolean> obj)
                {
                    if (obj != cache_ViewModel_ChartButtonState)
                    {
                        if (cache_ViewModel_ChartButtonState != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_ChartButtonState).PropertyChanged -= PropertyChanged_ViewModel_ChartButtonState;
                            cache_ViewModel_ChartButtonState = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_ChartButtonState = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_ChartButtonState;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_RemoveButtonState(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DataPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Reactive.Bindings.ReactivePropertySlim<global::System.Boolean> obj = sender as global::Reactive.Bindings.ReactivePropertySlim<global::System.Boolean>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_RemoveButtonState_Value(obj.Value, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Value":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_RemoveButtonState_Value(obj.Value, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Reactive.Bindings.ReactivePropertySlim<global::System.Boolean> cache_ViewModel_RemoveButtonState = null;
                public void UpdateChildListeners_ViewModel_RemoveButtonState(global::Reactive.Bindings.ReactivePropertySlim<global::System.Boolean> obj)
                {
                    if (obj != cache_ViewModel_RemoveButtonState)
                    {
                        if (cache_ViewModel_RemoveButtonState != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_RemoveButtonState).PropertyChanged -= PropertyChanged_ViewModel_RemoveButtonState;
                            cache_ViewModel_RemoveButtonState = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_RemoveButtonState = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_RemoveButtonState;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_SelectedDataItem(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DataPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Reactive.Bindings.ReactivePropertySlim<global::CrayfishMonitor_Desktop.Models.MeasurementSaveData> obj = sender as global::Reactive.Bindings.ReactivePropertySlim<global::CrayfishMonitor_Desktop.Models.MeasurementSaveData>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_SelectedDataItem_Value(obj.Value, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Value":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedDataItem_Value(obj.Value, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Reactive.Bindings.ReactivePropertySlim<global::CrayfishMonitor_Desktop.Models.MeasurementSaveData> cache_ViewModel_SelectedDataItem = null;
                public void UpdateChildListeners_ViewModel_SelectedDataItem(global::Reactive.Bindings.ReactivePropertySlim<global::CrayfishMonitor_Desktop.Models.MeasurementSaveData> obj)
                {
                    if (obj != cache_ViewModel_SelectedDataItem)
                    {
                        if (cache_ViewModel_SelectedDataItem != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_SelectedDataItem).PropertyChanged -= PropertyChanged_ViewModel_SelectedDataItem;
                            cache_ViewModel_SelectedDataItem = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_SelectedDataItem = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_SelectedDataItem;
                        }
                    }
                }
                public void RegisterTwoWayListener_2(global::Microsoft.UI.Xaml.Controls.Button sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Control.IsEnabledProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_2_IsEnabled();
                        }
                    });
                }
                public void RegisterTwoWayListener_3(global::Microsoft.UI.Xaml.Controls.Button sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Control.IsEnabledProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_3_IsEnabled();
                        }
                    });
                }
                public void RegisterTwoWayListener_4(global::Microsoft.UI.Xaml.Controls.Button sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Control.IsEnabledProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_4_IsEnabled();
                        }
                    });
                }
                public void RegisterTwoWayListener_5(global::Microsoft.UI.Xaml.Controls.ListView sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_5_SelectedItem();
                        }
                    });
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\DataPage.xaml line 1
                {                    
                    global::Microsoft.UI.Xaml.Controls.Page element1 = (global::Microsoft.UI.Xaml.Controls.Page)target;
                    DataPage_obj1_Bindings bindings = new DataPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            case 7: // Views\DataPage.xaml line 32
                {                    
                    global::Microsoft.UI.Xaml.Controls.Grid element7 = (global::Microsoft.UI.Xaml.Controls.Grid)target;
                    DataPage_obj7_Bindings bindings = new DataPage_obj7_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element7.DataContext);
                    element7.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Microsoft.UI.Xaml.DataTemplate.SetExtensionInstance(element7, bindings);
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element7, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

