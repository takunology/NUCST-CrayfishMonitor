#pragma checksum "D:\GitHub\NUCST-CrayfishMonitor\CrayfishMonitor\CrayfishMonitor-Desktop\Views\MonitorPage.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "F8D0749F27C7358C3BA30B5931592006BBE7DAD27147BAC58660DFD42FE8F673"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CrayfishMonitor_Desktop.Views
{
    partial class MonitorPage : 
        global::Microsoft.UI.Xaml.Controls.Page, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Microsoft.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(global::Microsoft.UI.Xaml.Controls.Primitives.Selector obj, global::System.Int32 value)
            {
                obj.SelectedIndex = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton obj, global::System.Nullable<global::System.Boolean> value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Boolean) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Boolean), targetNullValue);
                }
                obj.IsChecked = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class MonitorPage_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IMonitorPage_Bindings
        {
            private global::CrayfishMonitor_Desktop.Views.MonitorPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.ComboBox obj2;
            private global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton obj3;
            private global::Microsoft.UI.Xaml.Controls.Button obj4;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj2ItemsSourceDisabled = false;
            private static bool isobj2SelectedIndexDisabled = false;
            private static bool isobj3CommandDisabled = false;
            private static bool isobj3IsCheckedDisabled = false;
            private static bool isobj4CommandDisabled = false;

            private MonitorPage_obj1_BindingsTracking bindingsTracking;

            public MonitorPage_obj1_Bindings()
            {
                this.bindingsTracking = new MonitorPage_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 16 && columnNumber == 27)
                {
                    isobj2ItemsSourceDisabled = true;
                }
                else if (lineNumber == 17 && columnNumber == 27)
                {
                    isobj2SelectedIndexDisabled = true;
                }
                else if (lineNumber == 22 && columnNumber == 31)
                {
                    isobj3CommandDisabled = true;
                }
                else if (lineNumber == 23 && columnNumber == 31)
                {
                    isobj3IsCheckedDisabled = true;
                }
                else if (lineNumber == 25 && columnNumber == 25)
                {
                    isobj4CommandDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // Views\MonitorPage.xaml line 15
                        this.obj2 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_2(this.obj2);
                        break;
                    case 3: // Views\MonitorPage.xaml line 19
                        this.obj3 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton>(target);
                        this.bindingsTracking.RegisterTwoWayListener_3(this.obj3);
                        break;
                    case 4: // Views\MonitorPage.xaml line 24
                        this.obj4 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IMonitorPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::CrayfishMonitor_Desktop.Views.MonitorPage>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::CrayfishMonitor_Desktop.Views.MonitorPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::CrayfishMonitor_Desktop.ViewModels.MonitorPageViewModel obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_DeviceName(obj.DeviceName, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_SelectedDeviceIndex(obj.SelectedDeviceIndex, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_MeasureCommand(obj.MeasureCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_MeasureButtonState(obj.MeasureButtonState, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_ShowDataCommand(obj.ShowDataCommand, phase);
                    }
                }
            }
            private void Update_ViewModel_DeviceName(global::System.Collections.Generic.List<global::System.String> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\MonitorPage.xaml line 15
                    if (!isobj2ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj2, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SelectedDeviceIndex(global::Reactive.Bindings.ReactivePropertySlim<global::System.Int32> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_SelectedDeviceIndex(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_SelectedDeviceIndex_Value(obj.Value, phase);
                    }
                }
            }
            private void Update_ViewModel_SelectedDeviceIndex_Value(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MonitorPage.xaml line 15
                    if (!isobj2SelectedIndexDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj2, obj);
                    }
                }
            }
            private void Update_ViewModel_MeasureCommand(global::Reactive.Bindings.ReactiveCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\MonitorPage.xaml line 19
                    if (!isobj3CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj3, obj, null);
                    }
                }
            }
            private void Update_ViewModel_MeasureButtonState(global::Reactive.Bindings.ReactiveProperty<global::System.Boolean> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_MeasureButtonState(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_MeasureButtonState_Value(obj.Value, phase);
                    }
                }
            }
            private void Update_ViewModel_MeasureButtonState_Value(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MonitorPage.xaml line 19
                    if (!isobj3IsCheckedDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj3, obj, null);
                    }
                }
            }
            private void Update_ViewModel_ShowDataCommand(global::Reactive.Bindings.ReactiveCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\MonitorPage.xaml line 24
                    if (!isobj4CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj4, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_2_SelectedIndex()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            if (this.dataRoot.ViewModel.SelectedDeviceIndex != null)
                            {
                                this.dataRoot.ViewModel.SelectedDeviceIndex.Value = this.obj2.SelectedIndex;
                            }
                        }
                    }
                }
            }
            private void UpdateTwoWay_3_IsChecked()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            if (this.dataRoot.ViewModel.MeasureButtonState != null)
                            {
                                this.dataRoot.ViewModel.MeasureButtonState.Value = (global::System.Boolean)this.obj3.IsChecked;
                            }
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class MonitorPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<MonitorPage_obj1_Bindings> weakRefToBindingObj; 

                public MonitorPage_obj1_BindingsTracking(MonitorPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<MonitorPage_obj1_Bindings>(obj);
                }

                public MonitorPage_obj1_Bindings TryGetBindingObject()
                {
                    MonitorPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel_SelectedDeviceIndex(null);
                    UpdateChildListeners_ViewModel_MeasureButtonState(null);
                }

                public void PropertyChanged_ViewModel_SelectedDeviceIndex(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MonitorPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Reactive.Bindings.ReactivePropertySlim<global::System.Int32> obj = sender as global::Reactive.Bindings.ReactivePropertySlim<global::System.Int32>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_SelectedDeviceIndex_Value(obj.Value, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Value":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedDeviceIndex_Value(obj.Value, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Reactive.Bindings.ReactivePropertySlim<global::System.Int32> cache_ViewModel_SelectedDeviceIndex = null;
                public void UpdateChildListeners_ViewModel_SelectedDeviceIndex(global::Reactive.Bindings.ReactivePropertySlim<global::System.Int32> obj)
                {
                    if (obj != cache_ViewModel_SelectedDeviceIndex)
                    {
                        if (cache_ViewModel_SelectedDeviceIndex != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_SelectedDeviceIndex).PropertyChanged -= PropertyChanged_ViewModel_SelectedDeviceIndex;
                            cache_ViewModel_SelectedDeviceIndex = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_SelectedDeviceIndex = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_SelectedDeviceIndex;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_MeasureButtonState(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MonitorPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Reactive.Bindings.ReactiveProperty<global::System.Boolean> obj = sender as global::Reactive.Bindings.ReactiveProperty<global::System.Boolean>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_MeasureButtonState_Value(obj.Value, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Value":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_MeasureButtonState_Value(obj.Value, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Reactive.Bindings.ReactiveProperty<global::System.Boolean> cache_ViewModel_MeasureButtonState = null;
                public void UpdateChildListeners_ViewModel_MeasureButtonState(global::Reactive.Bindings.ReactiveProperty<global::System.Boolean> obj)
                {
                    if (obj != cache_ViewModel_MeasureButtonState)
                    {
                        if (cache_ViewModel_MeasureButtonState != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_MeasureButtonState).PropertyChanged -= PropertyChanged_ViewModel_MeasureButtonState;
                            cache_ViewModel_MeasureButtonState = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_MeasureButtonState = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_MeasureButtonState;
                        }
                    }
                }
                public void RegisterTwoWayListener_2(global::Microsoft.UI.Xaml.Controls.ComboBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_2_SelectedIndex();
                        }
                    });
                }
                public void RegisterTwoWayListener_3(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_3_IsChecked();
                        }
                    });
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\MonitorPage.xaml line 1
                {                    
                    global::Microsoft.UI.Xaml.Controls.Page element1 = (global::Microsoft.UI.Xaml.Controls.Page)target;
                    MonitorPage_obj1_Bindings bindings = new MonitorPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

